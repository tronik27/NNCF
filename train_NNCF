import tensorflow as tf
from tensorflow.keras.datasets import fashion_mnist
import matplotlib.pyplot as plt
from Correlation_utils import Plot3D
from nncf_utils import FilterDataset, make_tensorboard, SetWeightsCallback
from NNCF import NNCFModel


num_correlations = 32
epochs = 20
num_of_images = 12000
initial_filter_matrix = tf.zeros((1, 28, 28, 1))
gt_lable = 0
(train_images, train_labels), (test_images, test_labels) = fashion_mnist.load_data()
datagen = FilterDataset(gt_label=gt_lable, num_of_corr=num_correlations,
                        num_of_images=11000, augmentation=(0.2, True, True))
train_data, validation_data, shape = datagen.prepare_data_from_array(train_images=train_images,
                                                                     train_labels=train_labels,
                                                                     validation_images=test_images,
                                                                     validation_labels=test_labels)

nncf = NNCFModel(num_correlations=num_correlations,
                 initial_filter_matrix=initial_filter_matrix)

optimizer = tf.keras.optimizers.Adam(learning_rate=0.001)
nncf.build(input_shape=shape)
nncf.compile(optimizer=optimizer,
             loss=tf.keras.losses.MeanSquaredError(),
             metrics=[tf.keras.metrics.MeanAbsoluteError(),
                      tf.keras.metrics.CosineSimilarity(axis=1),
                      tf.keras.metrics.LogCoshError()])

print(nncf.summary())
tensorboard_callback = make_tensorboard()
reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(monitor='val_loss', factor=0.1, patience=3, min_lr=0.0001)
history = nncf.fit(train_data, validation_data=validation_data, steps_per_epoch=shape[0] // num_correlations,
                   callbacks=[SetWeightsCallback(train_data), reduce_lr, tensorboard_callback], epochs=epochs)

cf = nncf.get_correlation_filter(plot=True)
nncf.plot_output_correlations()
